{"version":3,"sources":["CharaModal.tsx","TitleCard.tsx","api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["charaList","_ref","bodies","id","characters","filter","v","titleId","map","c","react_default","a","createElement","Modal","Content","key","Description","Card","Header","name","trigger","Button","StyledCard","styled","_templateObject","TitleArea","_templateObject2","Meta","_templateObject3","titleCard","anime","title","onAirDate","CharaModal","_callee","regenerator_default","wrap","_context","prev","next","abrupt","Promise","resolve","then","mock","titles","t0","Error","message","stop","_callee2","_context2","charalists","Container","div","App_templateObject","Index","App_templateObject2","App","_useState","useState","_useState2","Object","slicedToArray","animes","setAnimes","_useState3","_useState4","setCharacters","useEffect","_fetchAnime","apply","this","arguments","fetchAnime","_fetchCharacters","fetchCharacters","TitleCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8685812.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport { Button, Card, Modal } from \"semantic-ui-react\";\r\n\r\nexport interface Character {\r\n  id: number;\r\n  titleId: number;\r\n  name: string;\r\n}\r\n\r\ninterface Props {\r\n  bodies: Character[];\r\n  id: number;\r\n}\r\n\r\nconst charaList: FC<Props> = ({ bodies, id }) => {\r\n  const characters = bodies\r\n    .filter(v => v.titleId === id)\r\n    .map((c: Character) => {\r\n      return (\r\n        <Modal.Content key={c.id}>\r\n          <Modal.Description>\r\n            <Card.Content>\r\n              <Card.Header>{c.name}</Card.Header>\r\n            </Card.Content>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n      );\r\n    });\r\n  return (\r\n    <Modal trigger={<Button>キャラクター一覧</Button>}>\r\n      <Modal.Header>キャラクタ一覧</Modal.Header>\r\n      {characters}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default charaList;\r\n","import React, { FC } from \"react\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\nimport CharaModal, { Character } from \"./CharaModal\";\r\n\r\nexport interface Anime {\r\n  id: number;\r\n  title: string;\r\n  onAirDate: string;\r\n}\r\n\r\ninterface Props {\r\n  anime: Anime;\r\n  bodies: Character[];\r\n}\r\n\r\nconst titleCard: FC<Props> = ({ anime, bodies }) => {\r\n  return (\r\n    <StyledCard>\r\n      <TitleArea>\r\n        <Card.Header>{anime.title}</Card.Header>\r\n        <Meta>{anime.onAirDate}</Meta>\r\n      </TitleArea>\r\n      <Card.Content>\r\n        <CharaModal bodies={bodies} id={anime.id} />\r\n      </Card.Content>\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nconst StyledCard = styled(Card)`\r\n  margin: 10px !important;\r\n`;\r\n\r\nconst TitleArea = styled(Card.Content)`\r\n  height: 72px;\r\n  position: relative;\r\n`;\r\n\r\nconst Meta = styled(Card.Meta)`\r\n  position: absolute;\r\n  bottom: 0;\r\n`;\r\n\r\nexport default titleCard;\r\n","import mock from \"./db.json\";\r\n\r\nexport async function fetchAnime(): Promise<any> {\r\n  try {\r\n    return Promise.resolve().then(() => mock.titles);\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n\r\nexport async function fetchCharacters(): Promise<any> {\r\n  try {\r\n    return Promise.resolve().then(() => mock.charalists);\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n","import React, { FC, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Character } from \"./CharaModal\";\r\nimport TitleCard, { Anime } from \"./TitleCard\";\r\nimport { fetchAnime, fetchCharacters } from \"./api\";\r\n\r\nconst App: FC = () => {\r\n  const [animes, setAnimes] = useState<Anime[]>([]);\r\n  const [characters, setCharacters] = useState<Character[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchAnime().then((v: Anime[]) => setAnimes(v));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchCharacters().then((v: Character[]) => setCharacters(v));\r\n  }, []);\r\n\r\n  function makeAnimeCard() {\r\n    return animes.map((v: Anime) => {\r\n      return <TitleCard key={v.id} anime={v} bodies={characters} />;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Index>{makeAnimeCard()}</Index>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Index = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: flex-start;\r\n  width: 940px;\r\n`;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}